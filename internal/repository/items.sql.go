// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items.sql

package repository

import (
	"context"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    board_id, title, description
) VALUES (
    ?, ?, ?
)
RETURNING id, board_id, title, description, completed, created_at, last_updated_at
`

type CreateItemParams struct {
	BoardID     int64  `json:"boardId"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.BoardID, arg.Title, arg.Description)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const deleteItemByID = `-- name: DeleteItemByID :exec
DELETE FROM items
WHERE id = ?
`

func (q *Queries) DeleteItemByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemByID, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT 
    i.id,
    i.board_id,
    i.title,
    i.description,
    i.completed,
    i.created_at,
    i.last_updated_at,
    COALESCE(json_group_array(t.tag), '[]') AS tags
FROM items i
LEFT JOIN tags t ON i.id = t.item_id
WHERE i.id = ?
GROUP BY i.id
`

type GetItemByIDRow struct {
	ID            int64       `json:"id"`
	BoardID       int64       `json:"boardId"`
	Title         string      `json:"title"`
	Description   string      `json:"description"`
	Completed     bool        `json:"completed"`
	CreatedAt     time.Time   `json:"createdAt"`
	LastUpdatedAt time.Time   `json:"lastUpdatedAt"`
	Tags          interface{} `json:"tags"`
}

func (q *Queries) GetItemByID(ctx context.Context, id int64) (GetItemByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getItemByID, id)
	var i GetItemByIDRow
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.Tags,
	)
	return i, err
}

const listItemsWithTagsByBoardID = `-- name: ListItemsWithTagsByBoardID :many
SELECT 
    i.id,
    i.board_id,
    i.title,
    i.description,
    i.completed,
    i.created_at,
    i.last_updated_at,
    COALESCE(json_group_array(t.tag), '[]') AS tags
FROM items i
LEFT JOIN tags t ON i.id = t.item_id
WHERE i.board_id = ?
GROUP BY i.id
ORDER BY i.created_at
`

type ListItemsWithTagsByBoardIDRow struct {
	ID            int64       `json:"id"`
	BoardID       int64       `json:"boardId"`
	Title         string      `json:"title"`
	Description   string      `json:"description"`
	Completed     bool        `json:"completed"`
	CreatedAt     time.Time   `json:"createdAt"`
	LastUpdatedAt time.Time   `json:"lastUpdatedAt"`
	Tags          interface{} `json:"tags"`
}

func (q *Queries) ListItemsWithTagsByBoardID(ctx context.Context, boardID int64) ([]ListItemsWithTagsByBoardIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listItemsWithTagsByBoardID, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsWithTagsByBoardIDRow
	for rows.Next() {
		var i ListItemsWithTagsByBoardIDRow
		if err := rows.Scan(
			&i.ID,
			&i.BoardID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemByID = `-- name: UpdateItemByID :one
UPDATE items
SET
    title = ?,
    description = ?,
    completed = ?,
    last_updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, board_id, title, description, completed, created_at, last_updated_at
`

type UpdateItemByIDParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Completed   bool   `json:"completed"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateItemByID(ctx context.Context, arg UpdateItemByIDParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemByID,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
